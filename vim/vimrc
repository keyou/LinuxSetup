set number
set showmatch
set nobackup
set noswapfile
set syntax=on

" change tab to 2 spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

set hidden
set confirm

set scrolloff=10

set showcmd

" fix vim color in tmux
set background=dark
set t_Co=256

set tags=tags;
set noautochdir
let Tlist_auto_open=1
" use gtags-cscope instead of cscope to support gtags
set csprg=gtags-cscope

set nocompatible
highlight LineNr ctermfg=grey
set cursorline
highlight CursorLine cterm=NONE

" do not store global and local values in a session
set ssop-=options
" do not store folds in a session
set ssop-=folds  

let mapleader = ' '
noremap <Space> <Nop>

"Window splitting remap"
nnoremap <C-k> :bnext<CR>
nnoremap <C-j> :bprev<CR>

"nnoremap <C-h> <C-w>w
"nnoremap <C-l> <C-w>W
:imap jj <Esc>
"inoremap <C-i> <Esc>
"inoremap <M-i> <Esc>

nnoremap <C-x> :bd<CR>

" Use ; for : in normal and visual mode, less keystrokes
nnoremap ; :
vnoremap ; :

nnoremap <silent> <C-s> :<C-u>update<CR>
vnoremap <silent> <C-s> <C-C>:update<CR>
inoremap <silent> <C-s> <C-C>:update<CR>

" insert a single letter
"nnoremap <C-i> i_<Esc>r

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"PlugIn
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

Plug 'haya14busa/incsearch.vim'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-scripts/taglist.vim'
Plug 'edkolev/tmuxline.vim'
"Plug 'ctrlpvim/ctrlp.vim'
Plug 'vim-scripts/Conque-GDB'

" buffer switch
"Plug 'mihaifm/bufstop'

" PlugInstall and PlugUpdate will clone fzf in ~/.fzf and run install script
" Both options are optional. You don't have to install fzf in ~/.fzf
" and you don't have to run install script if you use fzf only in Vim.
Plug 'junegunn/fzf', {'do': './install --all' }
Plug 'junegunn/fzf.vim'

"Plug 'bling/vim-bufferline'

"Plug 'derekwyatt/vim-fswitch'
" SwitchCpp
Plug 'ericcurtin/CurtineIncSw.vim'

"Plug 'Valloric/YouCompleteMe', {'do': './install.py --clang-completer'}
"Plug 'Rip-Rip/clang_complete', {'do': 'make install'}

" Rg
Plug 'yegappan/grep'

" Gtags
Plug 'aceofall/gtags.vim'

Plug 'octol/vim-cpp-enhanced-highlight'

" ctags management
Plug 'ludovicchabant/vim-gutentags'
" gutentags for gtags
Plug 'skywind3000/gutentags_plus'

" CLS
"Plug 'autozimu/LanguageClient-neovim', {
"    \ 'branch': 'next',
"    \ 'do': 'bash install.sh',
"    \ }

" Initialize plugin system
call plug#end()

map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

"let g:airline_symbols = {}
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_powerline_fonts=0
let g:airline_symbols_ascii=1
let g:airline_theme = 'papercolor'
let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#left_sep = ''
"let g:airline#extensions#tabline#left_alt_sep = ''

let g:airline#extensions#tmuxline#enabled = 1

"tmuxline
let g:tmuxline_powerline_separators = 0

"let g:bufferline_show_bufnr = 1
"let g:bufferline_echo = 0

let g:ctrlp_working_path_mode = 'ra'
"let g:ctrlp_user_command = 'find %s -type f'
let g:ctrlp_user_command = 'fd --type f --hidden --follow --exclude .git'


"Disable ConqueTerm F1-F12 quick keys
let g:ConqueTerm_ToggleKey = ''
let g:ConqueTerm_SendVisKey = ''
let g:ConqueTerm_SendFileKey = ''
let g:ConqueTerm_ExecFileKey = ''
let g:ConqueTerm_CWInsert = 1 

"disable ConqueGDB
let g:ConqueGdb_Disable = 1

"nnoremap <F5> :ConqueGdbCommand continue<CR>
"nnoremap <F6> :ConqueGdbCommand run<CR>
"map <F9> \b
"nnoremap <F10> :ConqueGdbCommand next<CR>
"nnoremap <F11> :ConqueGdbCommand step<CR>
"nnoremap <F12> :ConqueGdbCommand finish<CR>

"FZF
nnoremap <C-f> :Files<CR>
nmap <C-b> :Buffers<CR>
nmap <C-h> :History<CR>
"nmap <C-m> :Maps<CR>
"nmap <C-l> :Lines<CR>
"nmap <C-c> :Commands<CR>
command! -bang -nargs=* Rgx call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>), 1, <bang>0)
nmap <C-c><C-f> :Rgx <C-R><C-W><CR>
function! s:get_visual_selection()
    " Why is this not a built-in Vim script function?!
    let [line_start, column_start] = getpos("'<")[1:2]
    let [line_end, column_end] = getpos("'>")[1:2]
    let lines = getline(line_start, line_end)
    if len(lines) == 0
        return ''
    endif
    let lines[-1] = lines[-1][: column_end - (&selection == 'inclusive' ? 1 : 2)]
    let lines[0] = lines[0][column_start - 1:]
    return join(lines, "\n")
endfunction
function! s:grep222()
    let selection = s:get_visual_selection()
    call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".selection, 1)
endfunction
command! -bang Aselection call s:grep222()
"vmap <C-s><C-s> :<C-U>Rgx s:get_visual_selection()
vmap <C-c><C-f> :<C-U>Aselection<CR>

"vim beakpoint format to clipboard
func! CopyAsBreakpoint()
    let s:pos=expand('%:p') . ':' . line('.')
    call system("xclip", s:pos)
 endfunc
" map to a key
"map kk <ESC>:call CopyAsBreakpoint()<CR>

"clang_complete
"path to directory where library can be found
let g:clang_library_path='/usr/lib/llvm-6.0/lib/libclang.so.1'
let g:clang_periodic_quickfix=0
let g:clang_complete_copen=1
let g:clang_use_library=1
"let g:clang_auto_user_options="compile_commands.json, .clang_complete, path"

"gtags
:nmap <C-n> :cn<CR>
:nmap <C-p> :cp<CR>
:nmap <C-c><C-d> :GtagsCursor<CR>
:nmap <C-c><C-s> :Gtags -s <C-R><C-W><cr>
:nmap <C-c><C-g> :Gtags -g <C-R><C-W><cr>
:nmap <C-c><C-c> :cclose<CR>
:nmap <C-c><C-o> :copen<CR>

"vim-cpp-enhanced-highlight
let g:cpp_member_variable_highlight = 2

"bufstop
":map <C-b> :BufstopFast<CR>

"guntentags
" enable gtags module
let g:gutentags_modules = [] "['ctags', 'gtags_cscope']

" config project root markers.
let g:gutentags_project_root = ['.gn','.root']

" generate datebases in my cache directory, prevent gtags files polluting my project
"let g:gutentags_cache_dir = expand('~/.cache/tags')

" change focus to quickfix window after search (optional).
let g:gutentags_plus_switch = 1

" disable the default keymaps
let g:gutentags_plus_nomap = 0

let g:gutentags_define_advanced_commands = 1

let g:gutentags_auto_add_gtags_cscope = 0

	noremap <silent> <leader>cs :GscopeFind s <C-R><C-W><cr>
	noremap <silent> <leader>cg :GscopeFind g <C-R><C-W><cr>
	noremap <silent> <leader>cc :GscopeFind c <C-R><C-W><cr>
	noremap <silent> <leader>ct :GscopeFind t <C-R><C-W><cr>
	noremap <silent> <leader>ce :GscopeFind e <C-R><C-W><cr>
	noremap <silent> <leader>cf :GscopeFind f <C-R>=expand("<cfile>")<cr><cr>
	noremap <silent> <leader>ci :GscopeFind i <C-R>=expand("<cfile>")<cr><cr>
	noremap <silent> <leader>cd :GscopeFind d <C-R><C-W><cr>
	noremap <silent> <leader>ca :GscopeFind a <C-R><C-W><cr>
	noremap <silent> <leader>ck :GscopeKill<cr>

" SwitchCpp
:nmap <M-s> :SwitchCpp<CR>

" LanguageClient
"let g:LanguageClient_serverCommands = {
"  \ 'cpp': ['clangd'],
"  \ }
